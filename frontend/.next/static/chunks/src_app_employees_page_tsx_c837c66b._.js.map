{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/iKlejdi/Desktop/construction/frontend/src/app/employees/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\n\nexport interface Role {\n    id: number;\n    name: string;\n}\n\nexport interface Employee {\n    id: number;\n    firstName: string;\n    lastName: string;\n    role?: Role;\n    roleId?: number;\n    roleName?: string;\n}\n\ninterface EmployeeModalProps {\n    employee?: Employee | null;\n    mode?: \"add\" | \"edit\" | \"delete\";\n    onSubmit: (employee?: Employee) => void; // delete doesn't need data\n    buttonText?: React.ReactNode;\n    className?: string;\n}\n\nexport default function EmployeeModal({\n    employee,\n    mode = \"add\",\n    onSubmit,\n    buttonText,\n    className = \"btn btn-primary mb-3\",\n}: EmployeeModalProps) {\n    const [showModal, setShowModal] = useState(false);\n    const [modalEmployee, setModalEmployee] = useState<Employee>(\n        employee || { id: 0, firstName: \"\", lastName: \"\", roleId: 0, roleName: \"\" }\n    );\n    const [fadeIn, setFadeIn] = useState(false);\n    const [roles, setRoles] = useState<Role[]>([]);\n    const [showNewRoleInput, setShowNewRoleInput] = useState(false);\n    const [loadingRoles, setLoadingRoles] = useState(false);\n\n    // Fetch roles when modal opens\n    useEffect(() => {\n        if (showModal) {\n            fetchAllRoles();\n        }\n    }, [showModal]);\n\n    const fetchAllRoles = async () => {\n        setLoadingRoles(true);\n        try {\n            const response = await fetch('/api/roles');\n            if (!response.ok) {\n                throw new Error('Failed to fetch roles');\n            }\n            const data = await response.json();\n            setRoles(data);\n        } catch (err) {\n            console.error(\"Failed to fetch roles:\", err);\n        } finally {\n            setLoadingRoles(false);\n        }\n    };\n\n    // Reset state when opening\n    const openModal = () => {\n        if (mode === \"edit\" && employee) {\n            setModalEmployee({\n                ...employee,\n                roleId: employee.role?.id || 0,\n                roleName: \"\"\n            });\n        } else {\n            setModalEmployee({ id: 0, firstName: \"\", lastName: \"\", roleId: 0, roleName: \"\" });\n        }\n        setShowNewRoleInput(false);\n        setShowModal(true);\n    };\n\n    const closeModal = () => {\n        setFadeIn(false);\n        setTimeout(() => setShowModal(false), 300);\n    };\n\n    // fade-in animation\n    useEffect(() => {\n        if (showModal) {\n            setTimeout(() => setFadeIn(true), 200);\n        }\n    }, [showModal]);\n\n    const handleRoleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const value = e.target.value;\n        if (value === \"new\") {\n            setShowNewRoleInput(true);\n            setModalEmployee({ ...modalEmployee, roleId: 0, roleName: \"\" });\n        } else {\n            setShowNewRoleInput(false);\n            setModalEmployee({ ...modalEmployee, roleId: parseInt(value), roleName: \"\" });\n        }\n    };\n\n    const handleSubmit = (e?: React.FormEvent) => {\n        if (e) e.preventDefault();\n        if (mode === \"delete\") {\n            onSubmit(employee!);\n        } else {\n            onSubmit(modalEmployee);\n        }\n        closeModal();\n    };\n\n    return (\n        <>\n            {/* Open button */}\n            <button className={className} onClick={openModal}>\n                {buttonText || (mode === \"edit\" ? \"Edit Employee\" : mode === \"delete\" ? \"Delete Employee\" : \"Add Employee\")}\n            </button>\n\n            {/* Modal */}\n            {showModal && (\n                <>\n                    {/* Backdrop */}\n                    <div\n                        className={`modal-backdrop fade ${fadeIn ? \"show\" : \"\"}`}\n                        style={{ transition: \"opacity 0.3s\" }}\n                    />\n\n                    <div\n                        className={`modal fade ${fadeIn ? \"show d-block\" : \"d-none\"}`}\n                        tabIndex={-1}\n                        style={{ transition: \"opacity 0.3s\" }}\n                    >\n                        <div className=\"modal-dialog\">\n                            <div className=\"modal-content\">\n                                {mode === \"delete\" ? (\n                                    <>\n                                        <div className=\"modal-header\">\n                                            <h5 className=\"modal-title\">Confirm Delete</h5>\n                                            <button type=\"button\" className=\"btn-close\" onClick={closeModal} />\n                                        </div>\n                                        <div className=\"modal-body\">\n                                            <p>Are you sure you want to delete this employee?</p>\n                                            <p>\n                                                <strong>{employee?.firstName} {employee?.lastName}</strong>\n                                            </p>\n                                        </div>\n                                        <div className=\"modal-footer\">\n                                            <button type=\"button\" className=\"btn btn-secondary\" onClick={closeModal}>\n                                                No\n                                            </button>\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={() => handleSubmit()}>\n                                                Yes\n                                            </button>\n                                        </div>\n                                    </>\n                                ) : (\n                                    <form onSubmit={handleSubmit}>\n                                        <div className=\"modal-header\">\n                                            <h5 className=\"modal-title\">\n                                                {mode === \"edit\" ? \"Edit Employee\" : \"Add Employee\"}\n                                            </h5>\n                                            <button type=\"button\" className=\"btn-close\" onClick={closeModal} />\n                                        </div>\n                                        <div className=\"modal-body\">\n                                            <input\n                                                className=\"form-control mb-2\"\n                                                placeholder=\"First Name\"\n                                                value={modalEmployee.firstName}\n                                                onChange={(e) =>\n                                                    setModalEmployee({ ...modalEmployee, firstName: e.target.value })\n                                                }\n                                                required\n                                            />\n                                            <input\n                                                className=\"form-control mb-2\"\n                                                placeholder=\"Last Name\"\n                                                value={modalEmployee.lastName}\n                                                onChange={(e) =>\n                                                    setModalEmployee({ ...modalEmployee, lastName: e.target.value })\n                                                }\n                                                required\n                                            />\n                                            \n                                            {loadingRoles ? (\n                                                <div className=\"mb-2\">\n                                                    <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                                                        <span className=\"visually-hidden\">Loading roles...</span>\n                                                    </div>\n                                                    <span className=\"ms-2\">Loading roles...</span>\n                                                </div>\n                                            ) : (\n                                                <>\n                                                    <select\n                                                        className=\"form-control mb-2\"\n                                                        value={showNewRoleInput ? \"new\" : modalEmployee.roleId}\n                                                        onChange={handleRoleChange}\n                                                        required\n                                                    >\n                                                        <option value=\"0\">Select a role</option>\n                                                        {roles.map(role => (\n                                                            <option key={role.id} value={role.id}>\n                                                                {role.name}\n                                                            </option>\n                                                        ))}\n                                                        <option value=\"new\">+ Create new role</option>\n                                                    </select>\n                                                    \n                                                    {showNewRoleInput && (\n                                                        <input\n                                                            className=\"form-control mb-2\"\n                                                            placeholder=\"New Role Name\"\n                                                            value={modalEmployee.roleName}\n                                                            onChange={(e) =>\n                                                                setModalEmployee({ ...modalEmployee, roleName: e.target.value })\n                                                            }\n                                                            required={showNewRoleInput}\n                                                        />\n                                                    )}\n                                                </>\n                                            )}\n                                        </div>\n                                        <div className=\"modal-footer\">\n                                            <button type=\"button\" className=\"btn btn-secondary\" onClick={closeModal}>\n                                                Close\n                                            </button>\n                                            <button \n                                                type=\"submit\" \n                                                className=\"btn btn-primary\"\n                                                disabled={loadingRoles}\n                                            >\n                                                {mode === \"edit\" ? \"Save Changes\" : \"Add Employee\"}\n                                            </button>\n                                        </div>\n                                    </form>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </>\n            )}\n        </>\n    );\n}"],"names":[],"mappings":"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","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\n\nexport function middleware(req: NextRequest) {\n  // Get token from cookies (works only if you store it in cookies)\n  const token = req.cookies.get(\"token\")?.value;\n\n  // Define protected routes\n  const protectedRoutes = [\"/employees\", \"/projects\", \"/invoices\"];\n\n  // Check if the current request is a protected route\n  if (protectedRoutes.some((path) => req.nextUrl.pathname.startsWith(path))) {\n    if (!token) {\n      // Redirect to login if no token\n      return NextResponse.redirect(new URL(\"/login\", req.url));\n    }\n  }\n\n  // Otherwise, allow the request\n  return NextResponse.next();\n}\n\n// Apply middleware only to certain routes\nexport const config = {\n  matcher: [\"/employees/:path*\", \"/projects/:path*\", \"/invoices/:path*\"],\n};\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;;AAGO,SAAS,WAAW,GAAgB;IACzC,iEAAiE;IACjE,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU;IAExC,0BAA0B;IAC1B,MAAM,kBAAkB;QAAC;QAAc;QAAa;KAAY;IAEhE,oDAAoD;IACpD,IAAI,gBAAgB,IAAI,CAAC,CAAC,OAAS,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ;QACzE,IAAI,CAAC,OAAO;YACV,gCAAgC;YAChC,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;QACxD;IACF;IAEA,+BAA+B;IAC/B,OAAO,gMAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAqB;QAAoB;KAAmB;AACxE"}}]
}
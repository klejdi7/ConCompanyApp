// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Employee {
  id        Int               @id @default(autoincrement())
  firstName String
  lastName  String
  role      Role              @relation(fields: [roleId], references: [id])
  roleId    Int               @default(0)
  projects  ProjectEmployee[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Project {
  id              Int               @id @default(autoincrement())
  name            String
  location        String
  description     String
  employees       ProjectEmployee[]
  invoices        Invoice[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProjectExpenses ProjectExpenses[]
  ProjectOffers   ProjectOffers[]
}

model Invoice {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expenses {
  id                Int               @id @default(autoincrement())
  name              String
  expenseCategories ExpenseCategories @relation(fields: [expenseCatId], references: [id])
  expenseCatId      Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  ProjectExpenses   ProjectExpenses[]
}

model ExpenseCategories {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Expenses  Expenses[]
}

model ProjectEmployee {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  rate       Float    @default(0)
  workDays   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProjectExpenses {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  expenses  Expenses @relation(fields: [expenseId], references: [id])
  expenseId Int
  price     Float
  Quantity  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectOffers {
  id        Int      @id @default(autoincrement())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  offer     Float
  file      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
